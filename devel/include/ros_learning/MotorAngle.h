// Generated by gencpp from file ros_learning/MotorAngle.msg
// DO NOT EDIT!


#ifndef ROS_LEARNING_MESSAGE_MOTORANGLE_H
#define ROS_LEARNING_MESSAGE_MOTORANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_learning
{
template <class ContainerAllocator>
struct MotorAngle_
{
  typedef MotorAngle_<ContainerAllocator> Type;

  MotorAngle_()
    : header()
    , motor1(0)
    , motor2(0)
    , motor3(0)
    , motor4(0)
    , motor5(0)
    , motor6(0)
    , motor7(0)
    , motor8(0)
    , motor9(0)
    , motor10(0)  {
    }
  MotorAngle_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , motor1(0)
    , motor2(0)
    , motor3(0)
    , motor4(0)
    , motor5(0)
    , motor6(0)
    , motor7(0)
    , motor8(0)
    , motor9(0)
    , motor10(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _motor1_type;
  _motor1_type motor1;

   typedef int32_t _motor2_type;
  _motor2_type motor2;

   typedef int32_t _motor3_type;
  _motor3_type motor3;

   typedef int32_t _motor4_type;
  _motor4_type motor4;

   typedef int32_t _motor5_type;
  _motor5_type motor5;

   typedef int32_t _motor6_type;
  _motor6_type motor6;

   typedef int32_t _motor7_type;
  _motor7_type motor7;

   typedef int32_t _motor8_type;
  _motor8_type motor8;

   typedef int32_t _motor9_type;
  _motor9_type motor9;

   typedef int32_t _motor10_type;
  _motor10_type motor10;





  typedef boost::shared_ptr< ::ros_learning::MotorAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_learning::MotorAngle_<ContainerAllocator> const> ConstPtr;

}; // struct MotorAngle_

typedef ::ros_learning::MotorAngle_<std::allocator<void> > MotorAngle;

typedef boost::shared_ptr< ::ros_learning::MotorAngle > MotorAnglePtr;
typedef boost::shared_ptr< ::ros_learning::MotorAngle const> MotorAngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_learning::MotorAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_learning::MotorAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_learning::MotorAngle_<ContainerAllocator1> & lhs, const ::ros_learning::MotorAngle_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.motor1 == rhs.motor1 &&
    lhs.motor2 == rhs.motor2 &&
    lhs.motor3 == rhs.motor3 &&
    lhs.motor4 == rhs.motor4 &&
    lhs.motor5 == rhs.motor5 &&
    lhs.motor6 == rhs.motor6 &&
    lhs.motor7 == rhs.motor7 &&
    lhs.motor8 == rhs.motor8 &&
    lhs.motor9 == rhs.motor9 &&
    lhs.motor10 == rhs.motor10;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_learning::MotorAngle_<ContainerAllocator1> & lhs, const ::ros_learning::MotorAngle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_learning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_learning::MotorAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_learning::MotorAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_learning::MotorAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_learning::MotorAngle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_learning::MotorAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_learning::MotorAngle_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_learning::MotorAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f54c2c7b5eddb6d8e74ec2c7e3892930";
  }

  static const char* value(const ::ros_learning::MotorAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf54c2c7b5eddb6d8ULL;
  static const uint64_t static_value2 = 0xe74ec2c7e3892930ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_learning::MotorAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_learning/MotorAngle";
  }

  static const char* value(const ::ros_learning::MotorAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_learning::MotorAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int32 motor1\n"
"int32 motor2\n"
"int32 motor3\n"
"int32 motor4\n"
"int32 motor5\n"
"int32 motor6\n"
"int32 motor7\n"
"int32 motor8\n"
"int32 motor9\n"
"int32 motor10\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_learning::MotorAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_learning::MotorAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.motor1);
      stream.next(m.motor2);
      stream.next(m.motor3);
      stream.next(m.motor4);
      stream.next(m.motor5);
      stream.next(m.motor6);
      stream.next(m.motor7);
      stream.next(m.motor8);
      stream.next(m.motor9);
      stream.next(m.motor10);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_learning::MotorAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_learning::MotorAngle_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motor1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor1);
    s << indent << "motor2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor2);
    s << indent << "motor3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor3);
    s << indent << "motor4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor4);
    s << indent << "motor5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor5);
    s << indent << "motor6: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor6);
    s << indent << "motor7: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor7);
    s << indent << "motor8: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor8);
    s << indent << "motor9: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor9);
    s << indent << "motor10: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor10);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_LEARNING_MESSAGE_MOTORANGLE_H
